#pragma once

#include <array>
#include <vector>

#include <common/RCVector.h>
#include <common/RCBox.h>

namespace ambergris { namespace RealityComputing { namespace Import {

//////////////////////////////////////////////////////////////////////////
// \brief: struct VoxelNode Helper class for the VoxelCreator
//////////////////////////////////////////////////////////////////////////
struct VoxelHelperNode
{
    VoxelHelperNode();
    VoxelHelperNode( VoxelHelperNode* parentPtr );

    virtual ~VoxelHelperNode();
    
    //////////////////////////////////////////////////////////////////////////
    // \brief: Pointer to parent
    //////////////////////////////////////////////////////////////////////////
    VoxelHelperNode*                                    m_parentPtr;

    //////////////////////////////////////////////////////////////////////////
    // \brief: Child pointers
    //////////////////////////////////////////////////////////////////////////
    std::array< VoxelHelperNode*, 8 >                   m_childList;

    //////////////////////////////////////////////////////////////////////////
    // \brief: Total amount of points that passed through this node
    //////////////////////////////////////////////////////////////////////////,
    std::uint32_t                                       m_totalAmountOfPoints;

    //////////////////////////////////////////////////////////////////////////
    // \brief: RGBA
    //////////////////////////////////////////////////////////////////////////
    ambergris::RealityComputing::Common::RCVector4ub     m_rgba;

    //////////////////////////////////////////////////////////////////////////
    // \brief: Normal
    //////////////////////////////////////////////////////////////////////////
    std::uint16_t                                       m_normalId;

    //////////////////////////////////////////////////////////////////////////
    // \brief: Lidar Classification
    //////////////////////////////////////////////////////////////////////////
    std::uint8_t                                        m_lidarClassification;

    //////////////////////////////////////////////////////////////////////////
    // \brief: Primitive Classification
    //////////////////////////////////////////////////////////////////////////
    std::uint8_t                                        m_primitiveClassification;

    //////////////////////////////////////////////////////////////////////////
    // \brief: Bounding box of this node
    //////////////////////////////////////////////////////////////////////////
    ambergris::RealityComputing::Common::RCBox           m_svoBounds;

    //////////////////////////////////////////////////////////////////////////
    // \brief: The depth of this node
    //////////////////////////////////////////////////////////////////////////
    int                                                 m_currentDepth;

    //////////////////////////////////////////////////////////////////////////
    // \brief: Index of last point that passed this node(leaf nodes only)
    //////////////////////////////////////////////////////////////////////////
    std::vector<int>                                    m_pointIndices;

    //////////////////////////////////////////////////////////////////////////
    // \brief: True if this is a voxel leaf
    //////////////////////////////////////////////////////////////////////////
    bool                                                m_isVoxelLeaf;

    //////////////////////////////////////////////////////////////////////////
    // \brief: Index into VoxelInformation array
    //////////////////////////////////////////////////////////////////////////
    int                                                 m_indexToFirstChild;
    int                                                 m_numChilds;

private:
    // Disable copy/move
    VoxelHelperNode( const VoxelHelperNode& );
    VoxelHelperNode( const VoxelHelperNode&& );
    VoxelHelperNode& operator=( const VoxelHelperNode& );
    VoxelHelperNode& operator=( const VoxelHelperNode&& );


};

}}}
